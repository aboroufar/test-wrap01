# see documentation, e.g.
# - https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
# - https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
# - https://www.python.org/dev/peps/pep-0621/

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[project]
authors = [
    { name = "amir", email = "amir@gmail.com" }
]


description = "sky"
keywords = [""]
license = {file = "LICENSE"}
name = "capgemini"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.8"
version = "0.1.0"

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
]


# Project Metadata
[tool.poetry]
name = "capgemini_project_template"
version = "0.1.0"
description = ""
authors = ["Amir Boroufar <amir@sky.com>"]
readme = "README.md"
package-mode = false

# Project Public & Private Dependencies
[tool.poetry.dependencies]
python = ">=3.10,<3.15"
poetry-core = "^2.1.3"
python-dotenv = "^1.1.1"

# Project Testing Dependencies
[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^7.0.0"
ruff = "^0.7.2"
pre-commit = "^4.0.1"

[tool.mypy]
ignore_missing_imports = true

[tool.poetry.group.wrappers.dependencies]
chandra = {git = "gitlab@git.bskyb.com:plannet-users-team/chandra.git", branch = "main"}
plannet-client = {git = "gitlab@git.bskyb.com:plannet-users-team/plannet-client.git", branch = "main"}
sauron-client = {git = "gitlab@git.bskyb.com:plannet-users-team/sauron-client.git", branch="main"}
horizon-client = {git = "gitlab@git.bskyb.com:plannet-users-team/horizon-client.git",  branch="main"}



[tool.pytest.ini_options]
testpaths = ["tests"]


[tool.coverage.run]
branch = true
source = ["src/capgemini"]
command_line = "-m pytest"


[tool.ruff]
line-length = 120
output-format = "concise"
extend-exclude = ["docs"]

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Enable Pyflakes `E` and `F` codes by default.
select = ["ALL"]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN204", # Missing return type annotation for special (dunder) method
    "FBT",    # Using boolean function arguments
    "TD",     # TODOs
    "FIX001", # Resolve FIXMEs
    "FIX002", # Resolve TODOs
    "B028",   # No explicit `stacklevel` keyword argument found in warning
    # No docstrings required in the following cases
    "D100", # Missing module docstring
    "D104", # Missing public package docstring
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
# Tests can ignore a few extra rules
"tests/**.py" = [
    "ANN201", # Missing return type annotation for public function
    "PT011",  # Missing `match` parameter in `pytest.raises()`
    "S101",   # Use of assert is detected
]

[tool.ruff.lint.isort]
known-first-party = ["capgemini"]
force-single-line = true
no-lines-before = ["future","standard-library","third-party","first-party","local-folder"]